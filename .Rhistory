write.csv(tsSum_adeq, paste0(Results_dir, "/totals_timeseries_", aggregation_zone, ".csv"),row.names=FALSE)
cat("Completed extracting minimum stats for: ", aggregation_zone, "\n")
}
###################
# Process maximum
lv_ListMax <- list()
for(year in yearList){
###Livestock requirements
cattleIntake_model_MJ <- raster(paste0(spatialDir, "/outputs/cattleMER_min_MJ", year, ".tif")) #Max feed requirement will give max adequacy
shoatsIntake_model_MJ <- raster(paste0(spatialDir, "/outputs/shoatsMER_min_MJ", year, ".tif")) #Max feed requirement will give max adequacy
horseDonkeyIntake_model_MJ <- raster(paste0(spatialDir, "/outputs/horseDonkeyMER_MJ_2020.tif"))
FAOlvstPop <- read.csv(paste0(LivestockParams_dir, "/FAOSTAT_livestock_data.csv"))
lv_ListMax[[year]] <- sum(horseDonkeyIntake_model_MJ, (cattleIntake_model_MJ + (cattleIntake_model_MJ*FAOlvstPop$PcChange[FAOlvstPop$Year == year & FAOlvstPop$Item == "Cattle"])), (shoatsIntake_model_MJ + (shoatsIntake_model_MJ*FAOlvstPop$PcChange[FAOlvstPop$Year == year & FAOlvstPop$Item == "Shoats"])), na.rm = T)
}
tLv <- stack(lv_ListMax)
rm(cattleIntake_model_MJ, shoatsIntake_model_MJ, horseDonkeyIntake_model_MJ)
## Adequacy outputs
tFeed <- stack(list.files(path = paste0(spatialDir, "/outputs"), pattern="Feed_total_max_MJ",full.names = T))
#extract by aggregation zones
aggregation_zones <- c("country", "region", "state")
for(aggregation_zone in aggregation_zones){
if(aggregation_zone == "country"){
zones <- st_read(paste0(spatialDir, "/inputs/aoi0.shp"))
zones <- bind_cols(dplyr::select(zones, COUNTRY), exact_extract(terra::rast(tLv), zones, fun = "sum"))
}else if(aggregation_zone == "region"){
zones <- st_read(paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/intermediate/zones.gpkg"))
zones <- bind_cols(dplyr::select(zones, ECOZone), exact_extract(terra::rast(tLv), zones, fun = "sum"))
}else if(aggregation_zone == "state"){
zones <- st_read(paste0(spatialDir, "/inputs/aoi1.shp"))
zones <- bind_cols(dplyr::select(zones, NAME_1), exact_extract(terra::rast(tLv), zones, fun = "sum"))
}
zones <- bind_cols(zones, exact_extract(terra::rast(tFeed), zones, fun = "sum"))
st_geometry(zones) <- NULL
tsSum <- data.frame(zones)
colnames(tsSum) <- c("NAME_1", "lvstReqMEmin_2020", "lvstReqMEmin_2021", "lvstReqMEmin_2022", "lvstReqMEmin_2023", "feedME_max_2020", "feedME_max_2021", "feedME_max_2022", "feedME_max_2023")
tsSum$adeqMax_2020 <- tsSum$feedME_max_2020 / tsSum$lvstReqMEmin_2020
tsSum$adeqMax_2021 <- tsSum$feedME_max_2021 / tsSum$lvstReqMEmin_2021
tsSum$adeqMax_2022 <- tsSum$feedME_max_2022 / tsSum$lvstReqMEmin_2022
tsSum$adeqMax_2023 <- tsSum$feedME_max_2023 / tsSum$lvstReqMEmin_2023
tsSum_adeq <- read.csv(paste0(Results_dir, "/totals_timeseries_", aggregation_zone, ".csv"))
tsSum_adeq$adeqMax_2020 <- tsSum$adeqMax_2020
tsSum_adeq$adeqMax_2021 <- tsSum$adeqMax_2021
tsSum_adeq$adeqMax_2022 <- tsSum$adeqMax_2022
tsSum_adeq$adeqMax_2023 <- tsSum$adeqMax_2023
write.csv(tsSum_adeq, paste0(Results_dir, "/totals_timeseries_", aggregation_zone, ".csv"),row.names=FALSE)
cat("Completed extracting maximum stats for: ", aggregation_zone, "\n")
}
gc()
rm(list=ls())
# avoid scientific notation
options(scipen = 999)
# Load libraries
library(raster)
#library(stars)
library(sf)
library(tidyr)
library(dplyr)
library(exactextractr)
rasterOptions(tmpdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp") # Process needs > 40GB of temporary disk space
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
CropParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/CropParams")
LivestockParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/LivestockParams")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
Outputs_dir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/outputs")
# Produce DM requirments
# Energy intake in MJ
aoi0 <- st_read(paste0(spatialDir, "/inputs/aoi0.shp"))
lvMEReqTotal2023 <- rast(paste0(Outputs_dir, "/lvReqTotal2023.tif")) %>%
crop(., aoi0) %>%
mask(., mask=aoi0)
# Feed composition (%)
proportions <- c(crop_residue = 32.6, grass = 38.2, browse = 9.5, other_biomass = 19.6)
# ME values (MJ per kg DM)
me_values <- c(crop_residue = 6.5, grass = 6.83, browse = 7.97, other_biomass = 6.5)
# Weighted average ME
weighted_ME <- sum(proportions * me_values) / 100
# Calculate total dry matter intake in kg
lvDMReqTotal2023 <- lvMEReqTotal2023 / weighted_ME
# Bring in DM data
feed_list <- c("crop", "grass", "browse", "after")
tFeed <- rast(paste0(spatialDir, "/outputs/Feed_", feed_list, "DM2023.tif"))
tFeedTotal2023 <- sum(tFeed, na.rm=TRUE)
#extract by aggregation zones
aggregation_zones <- c("country", "region", "state")
for(aggregation_zone in aggregation_zones){
if(aggregation_zone == "country"){
zones <- st_read(paste0(spatialDir, "/inputs/aoi0.shp"))
DMReq <- exact_extract(lvDMReqTotal2023, aoi0, "sum")
countryDMStats <- cbind(NAME_0 = aoi0$COUNTRY, DMReq) %>% as.data.frame()
as.numeric(countryDMStats$DMReq)
DMSupply <- exact_extract(tFeedTotal2023, aoi0, "sum")
countryDMStats$DMSupply <-DMSupply
countryDMStats$adeq_2023 <- countryDMStats$DMSupply / as.numeric(countryDMStats$DMReq)
write.csv(countryDMStats, paste0(Results_dir, "/countryDMStats.csv"), row.names = FALSE)
}else if(aggregation_zone == "region"){
zones <- st_read(paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/intermediate/zones.gpkg"))
DMReq <- exact_extract(lvDMReqTotal2023, zones, "sum")
zoneDMStats <- cbind(NAME_0 = zones$ECOZone, DMReq) %>% as.data.frame()
as.numeric(zoneDMStats$DMReq)
DMSupply <- exact_extract(tFeedTotal2023, zones, "sum")
zoneDMStats$DMSupply <-DMSupply
zoneDMStats$adeq_2023 <- zoneDMStats$DMSupply / as.numeric(zoneDMStats$DMReq)
write.csv(zoneDMStats, paste0(Results_dir, "/regionDMStats.csv"), row.names = FALSE)
}else if(aggregation_zone == "state"){
zones <- st_read(paste0(spatialDir, "/inputs/aoi1.shp"))
DMReq <- exact_extract(lvDMReqTotal2023, zones, "sum")
zoneDMStats <- cbind(NAME_1 = zones$NAME_1, DMReq) %>% as.data.frame()
as.numeric(zoneDMStats$DMReq)
DMSupply <- exact_extract(tFeedTotal2023, zones, "sum")
zoneDMStats$DMSupply <-DMSupply
zoneDMStats$adeq_2023 <- zoneDMStats$DMSupply / as.numeric(zoneDMStats$DMReq)
write.csv(zoneDMStats, paste0(Results_dir, "/stateDMStats.csv"), row.names = FALSE)
}
cat("Completed extracting stats for: ", aggregation_zone, "\n")
}
gc()
rm(list=ls())
# avoid scientific notation
options(scipen = 999)
# Load libraries
library(raster)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(ggtext)
library(ggsci)
library(extrafont)
library(stars)
loadfonts(device = "all")
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
plotsDir <- paste0(root, "/src/3Balance-estimates/", country, "/Plots"); dir.create(plotsDir, F, T)
##Set plot theme
themeLabs <- theme(text=element_text(family="serif"),
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 8,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
#fill = "cornsilk"
),
plot.subtitle = element_textbox_simple(
size = 8,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
#fill = "cornsilk"
),
plot.caption = element_textbox_simple(
size = 8,
width = NULL,
padding = margin(0, 0, 0, 0),
margin = margin(0, 0, 0, 0),
#linetype = 1,
#r = grid::unit(8, "pt"),
#fill = "azure1"
),
legend.title = element_textbox_simple(
size = 8,
width = NULL,
padding = margin(0, 0, 0, 0),
margin = margin(0, 0, 0, 0),
),
axis.text = element_blank(),
strip.background = element_blank(),
panel.grid.major = element_line(colour = "transparent") #remove map grid lines#,
)
######
##Feed timeseries breakdown
tsSum <- read.csv(paste0(Results_dir, "/disaggregated_timeseries.csv"), stringsAsFactors = F)
#@ There is an overestimation of post-harvest growth in the Sahel - due to misclassification of river sides (etc) as cropping - with short growing period and long dry season.
#Correction by reallocating post-harvest growth to grass
tmp <- tsSum[tsSum$zone == "(Agro)pastoral sahel",]
tmp$grassME_mean <- tmp$grassME_mean + (tmp$afterME_mean * 0.94)
tmp$grassME_min <- tmp$grassME_min + (tmp$afterME_min * 0.94)
tmp$grassME_max <- tmp$grassME_max + (tmp$afterME_max * 0.94)
tmp$afterME_mean <- (tmp$afterME_mean * 0.06)
tmp$afterME_min <- (tmp$afterME_min * 0.06)
tmp$afterME_max <- (tmp$afterME_max * 0.06)
tsSum <- rbind(tsSum[!tsSum$zone == "(Agro)pastoral sahel",], tmp)
tsSum_plot <- pivot_longer(dplyr::select(tsSum, zone, year, cropME_mean, grassME_mean, browseME_mean, afterME_mean), cols = -c(zone, year))
lower <- pivot_longer(dplyr::select(tsSum, zone, year, cropME_min, grassME_min, browseME_min, afterME_min), cols = -c(zone, year), values_to = "lower")
upper <- pivot_longer(dplyr::select(tsSum, zone, year, cropME_max, grassME_max, browseME_max, afterME_max), cols = -c(zone, year), values_to = "upper")
tsSum_plot <- cbind(tsSum_plot, dplyr::select(lower, lower))
tsSum_plot <- cbind(tsSum_plot, dplyr::select(upper, upper))
tsSum_plot$value <- tsSum_plot$value/1000000
tsSum_plot$lower <- tsSum_plot$lower/1000000
tsSum_plot$upper <- tsSum_plot$upper/1000000
tsSum_plot <- transform(tsSum_plot, zone=factor(zone,levels=c("(Agro)pastoral sahel", "Central mixed", "Forest mixed", "Northern mixed", "Southern mixed")))
tsSum_plot <- transform(tsSum_plot, name=factor(name,levels= c("grassME_mean", "cropME_mean", "browseME_mean", "afterME_mean")))
Fig1 <- ggplot(tsSum_plot[tsSum_plot$year == 2023,], aes(name, value, fill = name)) + geom_col(position = "identity") + geom_errorbar(aes(ymin = lower, ymax=upper)) + ylab("Energy available (TJ ME)") + xlab("Feed category") +  scale_fill_manual(name = "", labels = c("Grass", "Crop residue", "Browse", "Other biomass"), values = c("cropME_mean" = "#F8CA02", "grassME_mean" = "#008D1F", "afterME_mean" = "#000000", "browseME_mean" = "#FF0000")) + theme_classic() + theme(text=element_text(family="serif", size = 12), axis.text.x=element_blank (), strip.background = element_blank()) + facet_wrap(~zone, ncol = 5) #scale_colour_manual(name = "", labels = c("Crop", "Grass", "Livestock"), values = c("cropME_mean" = "#F8CA02", "grassME_mean" = "#008D1F", "lvstReq" = "#FF0101")) +
ggsave(paste0(plotsDir, "/NGAFig1_1000.tiff"), Fig1, device = "tiff", dpi = 1000, width=90 * (14/5), height=20 * (14/5), units = "mm")
tsSum <- tsSum %>% rowwise() %>% mutate(totalME_mean = sum(cropME_mean, grassME_mean, browseME_mean, afterME_mean))
tsSum <- tsSum %>% rowwise() %>% mutate(cropMEprop_mean = cropME_mean/ totalME_mean, grassMEprop_mean = grassME_mean / totalME_mean, browseMEprop_mean = browseME_mean / totalME_mean, afterMEprop_mean = afterME_mean / totalME_mean)
tsSum_plot2 <- pivot_longer(dplyr::select(tsSum, zone, year, cropMEprop_mean, grassMEprop_mean, browseMEprop_mean, afterMEprop_mean), cols = -c(zone, year))
tsSum_plot2 <- transform(tsSum_plot2, zone=factor(zone,levels=c("(Agro)pastoral sahel", "Central mixed", "Forest mixed", "Northern mixed", "Southern mixed")))
tsSum_plot2 <- transform(tsSum_plot2, name=factor(name,levels=c("grassMEprop_mean", "cropMEprop_mean", "browseMEprop_mean", "afterMEprop_mean")))
SI1 <- ggplot(tsSum_plot2, aes(year, value, colour = name, fill = name)) + geom_line() + scale_x_continuous(breaks=c(2020, 2021, 2022, 2023)) + scale_y_continuous(limits = c(0,1), breaks = c(0,0.2,0.4,0.6,0.8)) + ylab("Proportion of energy") + xlab("Year") +  scale_colour_manual(name = "", labels = c("Grass", "Crop residue", "Browse", "Other biomass"), values = c("cropMEprop_mean" = "#F8CA02", "grassMEprop_mean" = "#008D1F", "afterMEprop_mean" = "#000000", "browseMEprop_mean" = "#FF0000")) + theme_classic() + theme(text=element_text(family="serif", size = 12), strip.background = element_blank(), panel.spacing = unit(6, "mm")) + facet_wrap(~zone, nrow = 1) #scale_colour_manual(name = "", labels = c("Crop", "Grass", "Livestock"), values = c("cropME_mean" = "#F8CA02", "grassME_mean" = "#008D1F", "lvstReq" = "#FF0101")) +
ggsave(paste0(plotsDir, "/NGASI1.tiff"), SI1, device = "tiff", dpi = 300, width=90 * (14/5), height=20 * (14/5), units = "mm")
#Table 2
zone_area <- readr::read_csv(paste0(Results_dir, "/area_zones.csv")) %>% rename(zone=ECOZone) %>% dplyr::select(zone, area_hectares) %>%
mutate(zone = case_when(zone %in% c("(Agro)pastoral sahel", "Northern mixed") ~ "dry_sav",
zone == "Forest mixed" ~ "for",
zone %in% c("Central mixed", "Southern mixed") ~ "wet_sav", TRUE ~ zone)) %>%
group_by(zone) %>% summarise(area_hectares=sum(area_hectares, na.rm=TRUE))
feedDM <- read.csv(paste0(Results_dir, "/cropME_region.csv"), stringsAsFactors = F) %>% dplyr::select(region, cropDM, grassDM, browseDM, afterDM) %>%
rowwise() %>% mutate(FeedDM = sum(cropDM, grassDM, browseDM, afterDM)) %>%
mutate(zone = case_when(region == "Dry Savannah" ~ "dry_sav",
region == "Forest" ~ "for",
region == "Wet Savannah" ~ "wet_sav", TRUE ~ region)) %>% dplyr::select(zone, FeedDM) %>%
left_join(zone_area, by="zone") %>%
mutate(yieldHa = (FeedDM/area_hectares)/1000, #convert t/ha 1000
FeedDM = FeedDM/1000000000) %>% #convert to million tonnes /1000000000
dplyr::select(-area_hectares)
x <- dplyr::select(tsSum[tsSum$year == 2023,], c(zone, totalME_mean, cropME_mean, grassME_mean, browseME_mean, afterME_mean))
x$eco <- c("wet_sav", "for", "dry_sav", "wet_sav", "dry_sav")
x$eco <- c("wet_sav", "for", "dry_sav", "wet_sav", "dry_sav")
x <- group_by(x, eco)
x <- summarise_all(dplyr::select(x, -zone), sum)
x<-rename(x, zone=eco)
x <- x %>% left_join(feedDM, by="zone")
x <- x %>% rowwise() %>% mutate(cropMEprop_mean = cropME_mean/ totalME_mean, grassMEprop_mean = grassME_mean / totalME_mean, browseMEprop_mean = browseME_mean / totalME_mean, afterMEprop_mean = afterME_mean / totalME_mean)
x <- dplyr::select(x, c(zone, FeedDM, yieldHa, totalME_mean, grassMEprop_mean, cropMEprop_mean, browseMEprop_mean, afterMEprop_mean)) %>%
mutate(totalME_mean=totalME_mean/1000000000000, across(5:ncol(.), ~ . * 100),
zone=case_when(zone=="wet_sav"~"Wet Savannah", zone == "for" ~ "Forest", zone == "dry_sav" ~ "Dry Savannah", TRUE ~ zone),
across(where(is.numeric), ~ round(., 2))) %>%
rename(Region=zone,`DM (Mt)`=FeedDM, `Yield (t/ha)`=yieldHa, `Energy supply (ME EJ*)`=totalME_mean, `Grass (%ME)`=grassMEprop_mean, `Crop residue (%ME)`=cropMEprop_mean,`Postharvest growth (%ME)`=afterMEprop_mean,`Browse (%ME)`=browseMEprop_mean)
write.csv(x, paste0(Results_dir, "/Annual_feedAvailability.csv"), row.names = FALSE)
View(x)
77.02+22.02+95.61
######
##Livestock feed adequacy timeseries breakdown
tsSumReg <- read.csv(paste0(Results_dir, "/totals_timeseries_region.csv"))
tsSumReg_mean <- pivot_longer(dplyr::select(tsSumReg, NAME_1, adeq_2020, adeq_2021, adeq_2022, adeq_2023), cols = -c(NAME_1))
tsSumReg_mean <- separate(tsSumReg_mean, name, c("name", "year"), "_")
tsSumRegMin <- pivot_longer(dplyr::select(tsSumReg, NAME_1, adeqMin_2020, adeqMin_2021, adeqMin_2022, adeqMin_2023), cols = -c(NAME_1))
tsSumRegMax <- pivot_longer(dplyr::select(tsSumReg, NAME_1, adeqMax_2020, adeqMax_2021, adeqMax_2022, adeqMax_2023), cols = -c(NAME_1))
tsSumReg_plot <- cbind(tsSumReg_mean, dplyr::select(tsSumRegMin, lower = value))
tsSumReg_plot <- cbind(tsSumReg_plot, dplyr::select(tsSumRegMax, upper = value))
tsSumReg_plot <- transform(tsSumReg_plot, NAME_1=factor(NAME_1,levels=c("(Agro)pastoral sahel", "Central mixed", "Forest mixed", "Northern mixed", "Southern mixed")))
Fig2 <- ggplot(tsSumReg_plot, aes(year, value, group = NAME_1)) + geom_hline(yintercept = 1, linetype = 2, colour = "grey") + geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey70", linetype = 0, alpha = 0.3) + geom_line() + ylab("Energy available / required") + xlab("Year") + labs(colour = "") + scale_x_discrete(breaks=c("2020", "2021", "2022", "2023")) + scale_y_continuous(limits = c(0,10), breaks = c(0,2,4,6,8,10)) + scale_colour_lancet() + theme_classic() +  theme(text=element_text(family="serif", size = 12), strip.background = element_blank()) + facet_wrap(~NAME_1, ncol = 5)
ggsave(paste0(plotsDir, "/NGAFig2_1000.tiff"), Fig2, device = "tiff", dpi = 1000, width=90 * (14/5), height=25 * (14/5), units = "mm")
#plot by aggregation zones
aggregation_zones <- c("region", "state")
for(aggregation_zone in aggregation_zones){
tsSumReg <- read.csv(paste0(Results_dir, "/totals_timeseries_", aggregation_zone,".csv"))
if(aggregation_zone =="region"){
zones <- st_read(paste0(spatialDir, "/intermediate/zones.gpkg"))
zones <- zones %>% left_join(tsSumReg, by = c("ECOZone"="NAME_1")) %>% rename(NAME_1=ECOZone)
tsSumReg_mean <- pivot_longer(dplyr::select(zones, NAME_1, adeq_2020, adeq_2021, adeq_2022, adeq_2023), cols = -c(NAME_1, geom))
}else if(aggregation_zone =="state"){
zones <- st_read(paste0(spatialDir, "/inputs/aoi1.shp"))
zones <- zones %>% left_join(tsSumReg, by = "NAME_1")
tsSumReg_mean <- pivot_longer(dplyr::select(zones, NAME_1, adeq_2020, adeq_2021, adeq_2022, adeq_2023), cols = -c(NAME_1, geometry))
}
tsSumReg_mean <- separate(tsSumReg_mean, name, c("name", "year"), "_") %>% tidyterra::filter(year == 2023)
if(aggregation_zone=="region"){
tsSumReg_plot <- transform(tsSumReg_mean, NAME_1=factor(NAME_1,levels=c("(Agro)pastoral sahel", "Northern mixed", "Southern mixed", "Central mixed", "Forest mixed")))
}else{tsSumReg_plot <- transform(tsSumReg_mean, NAME_1=factor(NAME_1,levels=unique(tsSumReg_mean$NAME_1)))}
Fig3 <- ggplot(data = tsSumReg_plot) +
geom_sf(aes(fill = value)) +
#facet_wrap(~ year, ncol = 4) +
scale_fill_gradient2(low = "darkred", mid = "white", high = "darkgreen", midpoint = 1, limits = c(floor(min(tsSumReg_plot$value, na.rm = TRUE)), ceiling(max(tsSumReg_plot$value, na.rm = TRUE))), space = "Lab", name = "", breaks = c(floor(min(tsSumReg_plot$value, na.rm = TRUE)), 1, ceiling(max(tsSumReg_plot$value, na.rm = TRUE))), labels = c("Negative balance", "0", "Positive balance")) +
labs(fill = "") +
coord_sf(xlim = c(2.1, 15.1), ylim = c(3.7, 14.3), expand = FALSE) +
theme_bw() +
theme(panel.background = element_rect(fill = "white"), text = element_text(family = "arial", size = 12), panel.grid.minor = element_blank(), plot.background = element_rect(fill = "white"))
ggsave(paste0(plotsDir, "/NGAFig3_1000_", aggregation_zone, ".tiff"), Fig3, device = "tiff", dpi = 1000,width=90 * (14/5), height=25 * (14/5), units = "mm")
}
######
##Mapping#
sfZones <- st_read(paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/intermediate/zones.gpkg"))
feed_grass_MJ <- raster(paste0(spatialDir, "/outputs/Feed_grass_MJ2023.tif"))
feed_crop_MJ <- raster(paste0(spatialDir, "/outputs/Feed_crop_MJ2023.tif"))
feed_browse_MJ <- raster(paste0(spatialDir, "/outputs/Feed_browse_MJ2023.tif"))
feed_after_MJ <- raster(paste0(spatialDir, "/outputs/Feed_after_MJ2023.tif"))
feed_total_MJ <- sum(feed_grass_MJ, feed_crop_MJ, feed_browse_MJ, feed_after_MJ, na.rm =T)
cattleIntake_model_MJ_2020 <- raster(paste0(spatialDir, "/outputs/cattleMER_MJ_2020.tif"))
shoatsIntake_model_MJ_2020 <- raster(paste0(spatialDir, "/outputs/shoatsMER_MJ_2020.tif"))
lvstIntake_MJ <- sum(cattleIntake_model_MJ_2020, shoatsIntake_model_MJ_2020, na.rm = T)
aoi1 <- st_read(paste0(spatialDir, "/inputs/aoi1.shp"))
feed_total_MJ <- mask(feed_total_MJ, aoi1)
lvstIntake_MJ <- mask(lvstIntake_MJ, aoi1)
resLvst <- res(lvstIntake_MJ)[1]
lvstIntake_MJ <- resample(lvstIntake_MJ, feed_total_MJ)/(resLvst/res(feed_total_MJ)[1])^2
lvstIntake_MJ <- reclassify(lvstIntake_MJ, c(-Inf, 0, 0))
countries <- ne_countries(scale = 50, type = "countries", returnclass = "sf")
ggplot() + geom_sf(data = countries, colour = "black", show.legend = F) +
geom_sf(data = sfZones, aes(fill = ECOZone)) + coord_sf(xlim = c(2.1, 15.1), ylim = c(3.7, 14.3), expand = FALSE) + labs(fill = "Region") #+ themeLabs + theme(legend.position="bottom")
ggplot() + geom_sf(data = countries, colour = "black", show.legend = F) +
geom_stars(data = st_as_stars(feed_total_MJ)/1000000) + geom_sf(data = aoi1, colour = "black", fill = NA, show.legend = F) + ggtitle("") + labs(fill = expression("Tj"~year^-1)) + xlab("") + ylab("") + scale_fill_gradient(limits = c(0, 1), breaks = c(0, 0.25, 0.5, 1), low = "#CDDF4A", high = "#0BAE1C", na.value = NA) + coord_sf(xlim = c(2.1, 15.1), ylim = c(3.7, 14.3), expand = FALSE) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), rect = element_blank(), panel.background = element_rect(fill = "blue3"), panel.grid.major = element_line(color = "blue3")) #+ themeLabs + theme(legend.position="bottom")
ggplot() + geom_sf(data = countries, colour = "black", show.legend = F) +
geom_stars(data = st_as_stars(lvstIntake_MJ)/1000000) + geom_sf(data = aoi1, colour = "black", fill = NA, show.legend = F) + ggtitle("") + labs(fill = expression("Tj"~year^-1)) + xlab("") + ylab("") + scale_fill_gradient(limits = c(0, 0.5), breaks = c(0, 0.25, 0.5), low = "#FFFFFF", high = "#F9A908", na.value = NA) + coord_sf(xlim = c(2.1, 15.1), ylim = c(3.7, 14.3), expand = FALSE) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), rect = element_blank(), panel.background = element_rect(fill = "blue3"), panel.grid.major = element_line(color = "blue3")) #+ themeLabs + theme(legend.position="bottom")
library(terra)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
countryDMStats
library(terra)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
library(stars)
library(raster)
library(ggplot2)
# avoid scientific notation
options(scipen = 999)
#rasterOptions(tmpdir = EDDIE_TMP)
rasterOptions(tmpdir="/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
terraOptions(tempdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
terraOptions(memfrac=0.5)
terraOptions(todisk=TRUE)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
plotsDir <- paste0(root, "/src/3Balance-estimates/", country, "/Plots")
# Load samples LGAs
sampldLGAs <- vect(paste0(spatialDir, "/inputs/FeedBal_SmplFrmStlmn_241126.gpkg"))
sampldLGAs <- sampldLGAs %>%
aggregate(., by = c("statename", "lganame", "state_id", "lga_id")) %>%
tidyterra::select(statename, state_id, lganame, lga_id) %>%
as.data.frame()
sampldLGAs_List <- unique(sampldLGAs$lganame)
# Loading Nigeria admin boundaries
aoi2 <- read_sf(paste0(spatialDir, "/inputs/aoi2.shp"))
aoi1 <- read_sf(paste0(spatialDir, "/inputs/aoi1.shp"))
aoi0 <- read_sf(paste0(spatialDir, "/inputs/aoi0.shp"))
aoi2 <- aoi2 %>%
tidyterra::filter(NAME_2 %in% sampldLGAs_List) %>%
left_join(sampldLGAs, by = c("NAME_1" = "statename", "NAME_2" = "lganame")) %>%
tidyterra::select(NAME_1, state_id, NAME_2, lga_id) %>%
rename(statename=NAME_1, lganame=NAME_2)
aoi2$area_km2 <- expanse(aoi2, unit = "km")
# extract DM
feed_list <- c("crop", "grass", "browse", "after")
tFeed <- rast(paste0(spatialDir, "/outputs/Feed_", feed_list, "DM2023.tif"))
feedDM <- exact_extract(tFeed, aoi2, "sum")
feedDM_stats <- cbind(LGA = aoi2$lganame, feedDM)
colnames(feedDM_stats)[2:5] <- c("cropDM_kg", "grassDM_kg", "browseDM_kg", "afterDM_kg")
write.csv(feedDM_stats, paste0(Results_dir, "/FeedDM_LGA.csv"), row.names = FALSE)
# State
feed_list <- c("crop", "grass", "browse", "after")
tFeed <- rast(paste0(spatialDir, "/outputs/Feed_", feed_list, "DM2023.tif"))
feedDM <- exact_extract(tFeed, aoi1, "sum")
feedDM_stats <- cbind(State = aoi1$NAME_1, feedDM)
colnames(feedDM_stats)[2:5] <- c("Crop residue", "Grass", "Browse", "Other biomass")
FeedBasket <- feedDM_stats %>%
rowwise() %>%
mutate(across(`Crop residue`:`Other biomass`, ~ . / sum(c_across(`Crop residue`:`Other biomass`)) * 100)) %>%
mutate_if(is.numeric, round, 1)
write.csv(FeedBasket, paste0(Results_dir, "/FeedBasket_State.csv"), row.names = FALSE)
# National
feedDM <- exact_extract(tFeed, aoi0, "sum")
feedDM_stats <- cbind(LGA = aoi0$COUNTRY, feedDM)
colnames(feedDM_stats)[2:5] <- c("Crop residue", "Grass", "Browse", "Other biomass")
FeedBasket <- feedDM_stats %>%
rowwise() %>%
mutate(across(`Crop residue`:`Other biomass`, ~ . / sum(c_across(`Crop residue`:`Other biomass`)) * 100)) %>%
mutate_if(is.numeric, round, 1)
write.csv(FeedBasket, paste0(Results_dir, "/FeedBasket_Country.csv"), row.names = FALSE)
# extract diet proportions
feed_list <- c("crop", "grass", "browse", "after")
tFeed <- rast(paste0(spatialDir, "/outputs/Feed_", feed_list, "DM2023.tif"))
feedDM <- exact_extract(tFeed, aoi2, "sum")
feedDM_stats <- cbind(LGA = aoi2$NAME_2, feedDM)
colnames(feedDM_stats)[2:4] <- c("cropDM_kg", "grassDM_kg", "browseDM_kg")
write.csv(feedDM_stats, paste0(Results_dir, "/FeedDM_LGA.csv"), row.names = FALSE)
# extract cropping and non-cropping days
season_list <- c("cropping", "dry")
# extract cropping and non-cropping days
season_list <- c("cropping", "dry")
tSeasons <- rast(paste0(spatialDir, "/outputs/", season_list, "Days_2023.tif"))
seasonLen <- exact_extract(tSeasons, aoi2, "mean")
seasonLen_stats <- cbind(LGA = aoi2$NAME_2, seasonLen)
colnames(seasonLen_stats)[2:3] <- c("croppingDays", "dryDays")
# extract cropping and non-cropping days
season_list <- c("cropping", "dry")
tSeasons <- rast(paste0(spatialDir, "/outputs/", season_list, "Days_2023.tif"))
seasonLen <- exact_extract(tSeasons, aoi2, "mean")
seasonLen_stats <- cbind(LGA = aoi2$NAME_2, seasonLen)
colnames(seasonLen_stats)[2:3] <- c("croppingDays", "dryDays")
# extract cropping and non-cropping days
season_list <- c("cropping", "dry")
tSeasons <- rast(paste0(spatialDir, "/outputs/", season_list, "Days_2023.tif"))
seasonLen <- exact_extract(tSeasons, aoi2, "mean")
seasonLen_stats <- cbind(LGA = aoi2$NAME_2, seasonLen)
seasonLen_stats <- cbind(LGA = aoi2$lganame, seasonLen)
colnames(seasonLen_stats)[2:3] <- c("croppingDays", "dryDays")
seasonLen_stats <- seasonLen_stats %>% mutate_if(is.numeric, round, digits = 0)
write.csv(seasonLen_stats, paste0(Results_dir, "/SeasonLength.csv"), row.names = FALSE)
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tSumLv <- exact_extract(tLv, aoi2, "sum")
tSumLv <- cbind(LGA = aoi2$NAME_2, tSumLv)
colnames(tSumLv)[2:10] <- c("Bulls", "Cows", "Steers", "Heifers", "Calves", "Sheep", "Lambs", "Goats", "Kids")
tSumLv <- tSumLv %>% mutate_if(is.numeric, round, digits = 0)
# tSumLv$Cattle <- tSumLv$Bulls+tSumLv$Cows+tSumLv$Steers+tSumLv$Heifers+tSumLv$Calves
# sum(tSumLv$Cattle)
write.csv(tSumLv, paste0(Results_dir, "/LivestockPopulation.csv"), row.names = FALSE)
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree", "crops")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
#tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
#tLU <- c(tLU, tLUcrop)
tMeanLU <- exact_extract(tLU, aoi2, "mean")
tMeanLU <- cbind(LGA = aoi2$NAME_2, tMeanLU)
tMeanLU <- tMeanLU %>% mutate(across(where(is.numeric), ~ . * 100))
write.csv(tMeanLU, paste0(Results_dir, "/LandUseProportion.csv"), row.names = FALSE)
# extract burning incidences
luClasses <- c("Crop", "Grass")
tBurn <- rast(paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/Burned/2023/burn",luClasses,"Months.tif"))
tBurn <- exact_extract(tBurn, aoi2, "frac")
tBurnEvents <- cbind(LGA = aoi2$NAME_2, tBurn)
pathDMP <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/DMP")
filesDMP <- list.files(path = pathDMP, pattern = paste0("RT6_", "2023", ".*\\.tif$"), full.names = TRUE)
stDMP <- rast(filesDMP)
feedDMP <- exact_extract(stDMP, aoi1, "sum")
feedDMP_stats <- cbind(State = aoi1$NAME_1, feedDMP)
feedDMP_stats <- feedDMP_stats %>%
transmute(
Jan = feedDMP_stats[[2]] + feedDMP_stats[[3]] + feedDMP_stats[[4]],
Feb = feedDMP_stats[[5]] + feedDMP_stats[[6]] + feedDMP_stats[[7]],
Mar = feedDMP_stats[[8]] + feedDMP_stats[[9]] + feedDMP_stats[[10]],
Apr = feedDMP_stats[[11]] + feedDMP_stats[[12]] + feedDMP_stats[[13]],
May = feedDMP_stats[[14]] + feedDMP_stats[[15]] + feedDMP_stats[[16]],
Jun = feedDMP_stats[[17]] + feedDMP_stats[[18]] + feedDMP_stats[[19]],
Jul = feedDMP_stats[[20]] + feedDMP_stats[[21]] + feedDMP_stats[[22]],
Aug = feedDMP_stats[[23]] + feedDMP_stats[[24]] + feedDMP_stats[[25]],
Sep = feedDMP_stats[[26]] + feedDMP_stats[[27]] + feedDMP_stats[[28]],
Oct = feedDMP_stats[[29]] + feedDMP_stats[[30]] + feedDMP_stats[[31]],
Nov = feedDMP_stats[[32]] + feedDMP_stats[[33]] + feedDMP_stats[[34]],
Dec = feedDMP_stats[[35]] + feedDMP_stats[[36]] + feedDMP_stats[[37]]) %>%
slice(-1) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)))
feedDMP_stats_values <- as.numeric(feedDMP_stats[1, ])
# Scale to 1–10
scaled_values <- ((feedDMP_stats_values - min(feedDMP_stats_values, na.rm = TRUE)) /
(max(feedDMP_stats_values, na.rm = TRUE) - min(feedDMP_stats_values, na.rm = TRUE))) * 9 + 1
# Create a new dataframe with month names
feedAvailability <- data.frame(
Month = names(feedDMP_stats),
Scaled_Value = round(scaled_values, 2))
write.csv(feedAvailability, paste0(Results_dir, "/feedAvailability.csv"), row.names = FALSE)
feedAvailability$Month <- factor(feedAvailability$Month, levels = month.abb)
feedAvailability_plot  <- ggplot(feedAvailability, aes(x = Month, y = Scaled_Value, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "darkred", size = 2) +
labs(title = "",
x = "Month",
y = "Feed Availability") +
scale_y_continuous(breaks = seq(1, 10, 2))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_bw() +
theme(plot.title = element_text(size = 12, family = "Arial", face = "bold"),
text = element_text(size = 12, family = "Arial"),
axis.title = element_text(size = 12, face="bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text = element_text(size = 12),
#panel.grid.minor = element_blank(),
#panel.grid.major = element_blank(),
#legend.key.height = unit(2, "cm"),
#legend.key.width = unit(0.5, "cm"),
legend.position = "none",
#legend.direction = "vertical",
legend.title=element_text(size=12),
legend.text=element_text(size = 12))
ggsave(paste0(plotsDir, "/feedAvailability_plot.tiff"), feedAvailability_plot, device = "tiff", dpi = 1000, width=90 * (14/5), height=20 * (14/5), units = "mm")
lvCategories <- c("CTL", "GTS", "SHP")
lvCountLs <- list()
for(lvCategory in lvCategories){
# extract livestock population
lvCount <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2023.D-DA.",lvCategory,".tif"))
lvCountSum <- exact_extract(lvCount, aoi1, "sum") %>% as.data.frame()
lvCountSum <- cbind(State = aoi1$NAME_1, lvCountSum) %>%
mutate_if(is.numeric, round, digits = 0)
colnames(lvCountSum) <- c("STATE", paste0(lvCategory))
#lvCountLs[[lvCategory]] <- lvCountSum
write.csv(lvCountSum, paste0(Results_dir, "/", lvCategory, "_Population.csv"), row.names = FALSE)
}
merged_df <- lvCountLs %>% purrr::reduce(full_join, by = "STATE")
