}else if(k%in%c("Goat", "Kid")&i=="Dry Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==1, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Goat", "Kid")&i=="Forest"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==2, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Goat", "Kid")&i=="Wet Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==3, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}
terra::writeRaster(LvPopRegion, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, "_", i, ".tif"), overwrite=TRUE)
}
}
# Loop through years
yearList <- c("2020", "2021", "2022", "2023")
LvPopRegion
plot(LvPopRegion)
testHeiferForest <- rast("/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4/Dissag_GLW4_2020_Heifer_Forest.tif")
testHeiferWet <- rast("/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4/Dissag_GLW4_2020_Heifer_Wet Savannah.tif")
testHeiferDry <- rast("/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4/Dissag_GLW4_2020_Heifer_Dry Savannah.tif")
testHeiferForest
testHeiferWet
testHeiferDry
plot(testHeiferDry)
plot(testHeiferWet)
Regions <- c("Dry Savannah", "Forest", "Wet Savannah")
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
lvPop <- c(lvCattle, lvSheep, lvGoat, ECORegions)
# Mapping categories to livestock types
animalMap <- list(
Cattle = c("Bull", "Cow", "Steer", "Heifer", "Calf"),
Sheep = c("Sheep", "Lamb"),
Goat = c("Goat", "Kid")
)
# Mapping regions to indices
regionIndex <- setNames(1:3, Regions)
for (i in Regions) {
for (k in lvPopCategories) {
animalType <- NULL
# Determine the type of animal
if (k %in% animalMap$Cattle) {
animalType <- "cattle"
} else if (k %in% animalMap$Sheep) {
animalType <- "sheep"
} else if (k %in% animalMap$Goat) {
animalType <- "goat"
}
if (!is.null(animalType)) {
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
multiplier <- param_ME$value[param_ME$Variable == "HS" & param_ME$name == k & param_ME$Region == i]
if (region == regionIndex[i]) {
if (animalType == "cattle") return(cattle * multiplier)
if (animalType == "sheep") return(sheep * multiplier)
if (animalType == "goat") return(goat * multiplier)
}
return(NA)
})
terra::writeRaster(LvPopRegion, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, "_", i, ".tif"), overwrite=TRUE)
}
}
}
Regions <- c("Dry Savannah", "Forest", "Wet Savannah")
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
lvPop <- c(lvCattle, lvSheep, lvGoat, ECORegions)
regionIndex <- setNames(1:3, Regions)
for (i in Regions) {
for (k in lvPopCategories) {
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
multiplier <- param_ME$value[param_ME$Variable == "HS" & param_ME$name == k & param_ME$Region == i]
if (region == regionIndex[i]) {
if (k %in% c("Bull", "Cow", "Steer", "Heifer", "Calf")) {
return(cattle * multiplier)
} else if (k %in% c("Sheep", "Lamb")) {
return(sheep * multiplier)
} else if (k %in% c("Goat", "Kid")) {
return(goat * multiplier)
}
}
return(NA)
})
terra::writeRaster(LvPopRegion, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, "_", i, ".tif"), overwrite = TRUE)
}
}
Regions <- c("Dry Savannah", "Forest", "Wet Savannah")
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
lvPop <- c(lvCattle, lvSheep, lvGoat, ECORegions)
regionIndex <- setNames(1:3, Regions)
for (i in Regions) {
for (k in lvPopCategories) {
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
multiplier <- param_ME$value[param_ME$Variable == "HS" & param_ME$name == k & param_ME$Region == i]
result <- ifelse(region == regionIndex[i],
switch(
TRUE,
k %in% c("Bull", "Cow", "Steer", "Heifer", "Calf") ~ cattle * multiplier,
k %in% c("Sheep", "Lamb") ~ sheep * multiplier,
k %in% c("Goat", "Kid") ~ goat * multiplier,
NA
),
NA)
result
})
terra::writeRaster(LvPopRegion, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, "_", i, ".tif"), overwrite = TRUE)
}
}
gc()
rm(list=ls())
#.libPaths(c(.libPaths()[2], .libPaths()[3]))
# Prepare livestock requirements - mean
# Author: Simon Fraval
# Last modified by John Mutua on 16/11/2024
# avoid scientific notation
options(scipen = 999)
# # Install required packages
# install.packages("terra")
# install.packages("raster")
# install.packages("sf")
# install.packages("dplyr")
# install.packages("tidyr")
# install.packages("purrr")
# install.packages("tidyterra")
# Load libraries
library(terra)
library(raster)
library(sf)
library(dplyr)
library(tidyr)
library(purrr)
library(tidyterra)
library(readr)
#library(exactextractr) #For zonal statistics
rasterOptions(tmpdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp") # Process needs > 40GB of temporary disk space
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
terraOptions(tempdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
terraOptions(memfrac=0.5)
terraOptions(todisk=TRUE)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
CropParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/CropParams")
LivestockParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/LivestockParams")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
param_ME <- read.csv(paste0(LivestockParams_dir, "/Livestock_energy_requirement.csv"), stringsAsFactors = F)
#param_ME <- pivot_longer(select(param_ME, -X), cols = c("Bull", "Steer", "Calf", "Heifer", "Cow", "Lamb", "Sheep", "Kid", "Goat"))
param_ME <- pivot_longer(param_ME, cols = c("Bull", "Steer", "Calf", "Heifer", "Cow", "Lamb", "Sheep", "Kid", "Goat")) %>%
filter(Statistic %in% c("Mean", "All"))
##CSIRO, 2007, Nutrient Requirements of Domesticated Ruminants
#https://vdocuments.net/nutrient-requirements-of-domesticated-ruminants.html?page=1
###Spatial data
#Add level 2 admin boundaries
aoi2 <- st_read(paste0(spatialDir, "/inputs/aoi2.shp"))
ECORegions <- rast(paste0(spatialDir, "/intermediate/regions.tif"))
lvCattle <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.CTL.tif"))
lvSheep <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.SHP.tif"))
lvGoat <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.GTS.tif"))
lvHorse <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.HRS.tif"))
lvCattle <- terra::crop(lvCattle, aoi2, mask = T)
lvSheep <- terra::crop(lvSheep, aoi2, mask = T)
lvGoat <- terra::crop(lvGoat, aoi2, mask = T)
lvHorse <- terra::crop(lvHorse, aoi2, mask = T)
lvDonkey <- lvHorse*3
lv <- c(lvCattle, lvSheep, lvGoat) #Number per 10km pixel
ECORegions <- terra::resample(ECORegions, lv, method = 'near')
lv <- terra::crop(lv, ECORegions)
lv <- c(lv, ECORegions)
##Add production system layer
glps <- rast(paste0(spatialDir, "/inputs/GLPS/glps.tif"))
glps <- terra::resample(glps, lv, method = 'near')
glps <- terra::crop(glps, ECORegions, mask = T)
periurban <- glps %>% tidyterra::mutate(CLASSNAME = ifelse(as.character(CLASSNAME) == "Urban", 1, 0)) # Convert urban areas to 1, other areas to 0
#periurban <- periurban == 13
lv <- c(lv, periurban)
lvTLU <- lapp(lv[[1:3]], fun = function(cattle, sheep, goat){(cattle*1)+(sheep*0.15)+(goat*0.15)}, filename = paste0(spatialDir, "/inputs/GLW4/TLU.tif"), overwrite = T)
# Produce livestock number by categories
Regions <- c("Dry Savannah", "Forest", "Wet Savannah")
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
lvPop <- c(lvCattle, lvSheep, lvGoat, ECORegions)
for(i in Regions){
for(k in lvPopCategories) {
if(k%in%c("Bull", "Cow", "Steer", "Heifer", "Calf")&i=="Dry Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==1, cattle * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Bull", "Cow", "Steer", "Heifer", "Calf")&i=="Forest"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==2, cattle * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Bull", "Cow", "Steer", "Heifer", "Calf")&i=="Wet Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==3, cattle * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Sheep", "Lamb")&i=="Dry Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==1, sheep * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Sheep", "Lamb")&i=="Forest"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==2, sheep * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Sheep", "Lamb")&i=="Wet Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==3, sheep * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Goat", "Kid")&i=="Dry Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==1, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Goat", "Kid")&i=="Forest"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==2, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}else if(k%in%c("Goat", "Kid")&i=="Wet Savannah"){
LvPopRegion <- lapp(lvPop, fun = function(cattle, sheep, goat, region) {
ifelse(region==3, goat * param_ME$value[param_ME$Variable=="HS" & param_ME$name == k & param_ME$Region == i], NA)
})
}
terra::writeRaster(LvPopRegion, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, "_", i, ".tif"), overwrite=TRUE)
}
}
root
getwd()
lvRas <- rast(paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4/Dissag_GLW4_2020_", k, "_Dry Savannah.tif"))
lvRas
plot(lvRas)
# Combine livestock population layers
lvDir <- paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4")
lvRas <- rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Dry Savannah.tif"))
lvRas <- rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Dry Savannah.tif"))+rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Wet Savannah.tif"))+rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Forest.tif"))
plot(lvRas )
lvRas <- sum(rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Dry Savannah.tif")), rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Wet Savannah.tif")), rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Forest.tif")), na.rm=TRUE)
lvRas
plot(lvRas)
paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, ".tif")
# Combine livestock population layers
lvDir <- paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/GLW4")
for(k in lvPopCategories){
lvRas <- sum(rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Dry Savannah.tif")), rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Wet Savannah.tif")), rast(paste0(lvDir, "/Dissag_GLW4_2020_", k, "_Forest.tif")), na.rm=TRUE)
terra::writeRaster(lvRas, paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_", k, ".tif"), overwrite=TRUE)
}
# extract livestock population
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLivestock <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvPopCategories,".tif"))
tLivestock
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
tSumLv <- exact_extract(tLv, aoi2, "sum")
library(terra)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
library(stars)
# avoid scientific notation
options(scipen = 999)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
aoi2 <-read_sf(paste0(spatialDir, "/inputs/aoi2.shp"))
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
tSumLv <- exact_extract(tLv, aoi2, "sum")
gc()
rm(list=ls())
# avoid scientific notation
options(scipen = 999)
# Load libraries
library(terra)
library(raster)
library(sf)
library(dplyr)
library(tidyr)
library(purrr)
library(tidyterra)
library(readr)
rasterOptions(tmpdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp") # Process needs > 40GB of temporary disk space
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
terraOptions(tempdir = "/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
terraOptions(memfrac=0.5)
terraOptions(todisk=TRUE)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
CropParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/CropParams")
LivestockParams_dir <- paste0(root, "/src/3Balance-estimates/", country, "/LivestockParams")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
param_ME <- read.csv(paste0(LivestockParams_dir, "/Livestock_energy_requirement.csv"), stringsAsFactors = F)
#param_ME <- pivot_longer(select(param_ME, -X), cols = c("Bull", "Steer", "Calf", "Heifer", "Cow", "Lamb", "Sheep", "Kid", "Goat"))
param_ME <- pivot_longer(param_ME, cols = c("Bull", "Steer", "Calf", "Heifer", "Cow", "Lamb", "Sheep", "Kid", "Goat")) %>%
filter(Statistic %in% c("Mean", "All"))
###Spatial data
#Add level 2 admin boundaries
aoi2 <- st_read(paste0(spatialDir, "/inputs/aoi2.shp"))
ECORegions <- rast(paste0(spatialDir, "/intermediate/regions.tif"))
lvCattle <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.CTL.tif"))
lvSheep <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.SHP.tif"))
lvGoat <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.GTS.tif"))
lvHorse <- rast(paste0(spatialDir, "/inputs/GLW4/GLW4-2020.D-DA.HRS.tif"))
lvCattle <- terra::crop(lvCattle, aoi2, mask = T)
lvSheep <- terra::crop(lvSheep, aoi2, mask = T)
lvGoat <- terra::crop(lvGoat, aoi2, mask = T)
lvHorse <- terra::crop(lvHorse, aoi2, mask = T)
lvDonkey <- lvHorse*3
lv <- c(lvCattle, lvSheep, lvGoat) #Number per 10km pixel
ECORegions <- terra::resample(ECORegions, lv, method = 'near')
lv <- terra::crop(lv, ECORegions)
lv <- c(lv, ECORegions)
##Add production system layer
glps <- rast(paste0(spatialDir, "/inputs/GLPS/glps.tif"))
glps <- terra::resample(glps, lv, method = 'near')
glps <- terra::crop(glps, ECORegions, mask = T)
periurban <- glps %>% tidyterra::mutate(CLASSNAME = ifelse(as.character(CLASSNAME) == "Urban", 1, 0)) # Convert urban areas to 1, other areas to 0
#periurban <- periurban == 13
lv <- c(lv, periurban)
lvTLU <- lapp(lv[[1:3]], fun = function(cattle, sheep, goat){(cattle*1)+(sheep*0.15)+(goat*0.15)}, filename = paste0(spatialDir, "/inputs/GLW4/TLU.tif"), overwrite = T)
# Produce livestock number by categories
Regions <- c("Dry Savannah", "Forest", "Wet Savannah")
lvPopCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
lvPop <- c(lvCattle, lvSheep, lvGoat, ECORegions)
# Extract results at state
library(terra)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
library(stars)
# avoid scientific notation
options(scipen = 999)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
aoi2 <-read_sf(paste0(spatialDir, "/inputs/aoi2.shp"))
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tSumLv <- exact_extract(tLv, aoi2, "sum")
View(tSumLv)
tSumLv <- cbind(LGA = aoi2$NAME_2, tSumLv)
View(tSumLv)
names(tSumLv)
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tSumLv <- exact_extract(tLv, aoi2, "sum")
tSumLv <- cbind(LGA = aoi2$NAME_2, tSumLv)
colnames(tSumLv)[2:10] <- c("Bulls", "Cows", "Steers", "Heifers", "Calves", "Sheep", "Lambs", "Goats", "Kids")
View(tSumLv)
tSumLv <- tSumLv %>% mutate_if(is.numeric, round, digits = 0)
View(tSumLv)
names(tSumLv)
tSumLv$Cattle <- tSumLv$Bulls+tSumLv$Cows+tSumLv$Steers+tSumLv$Heifers+tSumLv$Calves
View(tSumLv)
sum(tSumLv$Cattle)
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tSumLv <- exact_extract(tLv, aoi2, "sum")
tSumLv <- cbind(LGA = aoi2$NAME_2, tSumLv)
colnames(tSumLv)[2:10] <- c("Bulls", "Cows", "Steers", "Heifers", "Calves", "Sheep", "Lambs", "Goats", "Kids")
tSumLv <- tSumLv %>% mutate_if(is.numeric, round, digits = 0)
View(tSumLv)
# tSumLv$Cattle <- tSumLv$Bulls+tSumLv$Cows+tSumLv$Steers+tSumLv$Heifers+tSumLv$Calves
# sum(tSumLv$Cattle)
write.csv(tSumLv, paste0(Results_dir, "/LivestockPopulation.csv"), row.names = FALSE)
# Extract results at state
library(terra)
#library(stars)
library(sf)
library(exactextractr)
library(rnaturalearth)
library(dplyr)
library(tidyr)
library(stars)
# avoid scientific notation
options(scipen = 999)
# root folder
root <- "."
country <- "Nigeria"
# paths
spatialDir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData")
Results_dir <- paste0(root, "/src/3Balance-estimates/", country, "/Results")
aoi2 <-read_sf(paste0(spatialDir, "/inputs/aoi2.shp"))
# extract DM
feed_list <- c("crop", "grass", "browse")
tFeed <- rast(paste0(spatialDir, "/outputs/Feed_", feed_list, "DM2023.tif"))
feedDM <- exact_extract(tFeed, aoi2, "sum")
feedDM_stats <- cbind(LGA = aoi2$NAME_2, feedDM)
colnames(feedDM_stats)[2:4] <- c("cropDM_kg", "grassDM_kg", "browseDM_kg")
write.csv(feedDM_stats, paste0(Results_dir, "/FeedDM_LGA.csv"), row.names = FALSE)
# extract cropping and non-cropping days
season_list <- c("cropping", "dry")
tSeasons <- rast(paste0(spatialDir, "/outputs/", season_list, "Days_2023.tif"))
seasonLen <- exact_extract(tSeasons, aoi2, "mean")
seasonLen_stats <- cbind(LGA = aoi2$NAME_2, seasonLen)
colnames(seasonLen_stats)[2:3] <- c("croppingDays", "dryDays")
seasonLen_stats <- seasonLen_stats %>% mutate_if(is.numeric, round, digits = 0)
write.csv(seasonLen_stats, paste0(Results_dir, "/SeasonLength.csv"), row.names = FALSE)
# extract livestock population
lvCategories <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tLv <- rast(paste0(spatialDir, "/inputs/GLW4/Dissag_GLW4_2020_",lvCategories,".tif"))
names(tLv) <- c("Bull", "Cow", "Steer", "Heifer", "Calf", "Sheep", "Lamb", "Goat", "Kid")
tSumLv <- exact_extract(tLv, aoi2, "sum")
tSumLv <- cbind(LGA = aoi2$NAME_2, tSumLv)
colnames(tSumLv)[2:10] <- c("Bulls", "Cows", "Steers", "Heifers", "Calves", "Sheep", "Lambs", "Goats", "Kids")
tSumLv <- tSumLv %>% mutate_if(is.numeric, round, digits = 0)
# tSumLv$Cattle <- tSumLv$Bulls+tSumLv$Cows+tSumLv$Steers+tSumLv$Heifers+tSumLv$Calves
# sum(tSumLv$Cattle)
write.csv(tSumLv, paste0(Results_dir, "/LivestockPopulation.csv"), row.names = FALSE)
root
getwd()
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse",luClasses,".tif"))
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/",luClasses,".tif"))
paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/",luClasses,".tif")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
tLU <- c(tLU, tLUcrop)
tLU
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
tLU <- c(tLU, tLUcrop)
names(tLU) <- c("grass", "shrub", "tree", "crop")
tLU
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
tLU <- c(tLU, tLUcrop)
names(tLU) <- c("grass", "shrub", "tree", "crop")
tSumLU <- exact_extract(tLU, aoi2, "mean")
tMeanLU <- exact_extract(tLU, aoi2, "mean")
View(tMeanLU)
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree", "crops")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
tLU
#tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
#tLU <- c(tLU, tLUcrop)
names(tLU) <- c("grass", "shrub", "tree", "crop")
tMeanLU <- exact_extract(tLU, aoi2, "mean")
View(tMeanLU)
tMeanLU <- cbind(LGA = aoi2$NAME_2, tMeanLU)
tMeanLU
View(tMeanLU)
# extract land use types and proportions
luClasses <- c("grass", "shrub", "tree", "crops")
tLU <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LU",luClasses,"300.tif"))
#tLUcrop <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/Feed_DrySeason/LandUse/LUcrops300DEA.tif"))
#tLU <- c(tLU, tLUcrop)
tMeanLU <- exact_extract(tLU, aoi2, "mean")
tMeanLU <- cbind(LGA = aoi2$NAME_2, tMeanLU)
colnames(tSumLU)[2:5] <- c("grass", "shrub", "tree", "crop")
tMeanLU
View(tMeanLU)
colnames(tMeanLU)[2:5] <- c("grass", "shrub", "tree", "crop")
View(tMeanLU)
tMeanLU <- tMeanLU %>% mutate(across(where(is.numeric), ~ . * 100))
View(tMeanLU)
write.csv(tMeanLU, paste0(Results_dir, "/LandUseProportion.csv"), row.names = FALSE)
root
# extract burnung incidences
luClasses <- c("Crop", "Grass")
tLU <- rast(paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/Burned/2023/burn",luClasses,"Months.tif"))
tBurn <- rast(paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/Burned/2023/burn",luClasses,"Months.tif"))
tBurn
plot(tBurn)
# extract burnung incidences
luClasses <- c("Crop", "Grass")
tBurn <- rast(paste0(root, "/src/3Balance-estimates/Nigeria/SpatialData/inputs/Burned/2023/burn",luClasses,"Months.tif"))
tBurn <- exact_extract(tBurn, aoi2, "mean")
tBurn
tBurn <- exact_extract(tBurn, aoi2, "median")
?exact_extract
tBurn <- exact_extract(tBurn, aoi2, "mode")
tBurn <- exact_extract(tBurn, aoi2, "majority")
tBurn
tBurn <- exact_extract(tBurn, aoi2, "mean")
