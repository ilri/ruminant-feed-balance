root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
outdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/LandUse"); dir.create(outdir, F, T)
# read AOI
aoi_path <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp")
filenamesTifInter <- list.files(path = proPath ,pattern="*.tif$",full.names = T)
##@Resample and crop with gdal?
for(i in 1:length(filenamesTifInter)){
gdalwarp(srcfile = filenamesTifInter[i], dstfile = paste0(outdir, "/", basename(filenamesTifInter[i])), overwrite = T, tr = c(0.00297619, 0.00297619), r = "near", cutline = aoi_path, crop_to_cutline = T) #0.00297619, 0.00297619
}
# Load required packages
library(raster)
library(stars)
#library(terra)
library(sf)
library(exactextractr)
library(terra)
library(gdalUtils)
# study area
country <- "Nigeria"
# root folder
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
outdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/LandCover"); dir.create(outdir, F, T)
# read AOI
aoi_path <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp")
filenamesTifInter <- list.files(path = proPath ,pattern="*.tif$",full.names = T)
##@Resample and crop with gdal?
for(i in 1:length(filenamesTifInter)){
gdalwarp(srcfile = filenamesTifInter[i], dstfile = paste0(outdir, "/", basename(filenamesTifInter[i])), overwrite = T, tr = c(0.00297619, 0.00297619), r = "near", cutline = aoi_path, crop_to_cutline = T) #0.00297619, 0.00297619
}
paste0(outdir, "/", basename(filenamesTifInter[i]))
test <-rast("/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance/src/2Feed-geoprocessing/SpatialData/inputs/Nigeria/LandCover/ESA_WorldCover10m_v100_NGA.tif")
test
plot(test)
filenamesTifInter[i]
test <- rast("/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance/src/1Data-download/SpatialData/inputs/LandCover/ESA_WorldCover10m_v100_NGA.tif")
plot(test)
filenamesTifInter[i]
test
filenamesTifInter[i]
paste0(proPath, "/ESA_WorldCover10m_v100_NGA.tif")
# Load required packages
library(raster)
library(terra)
library(gdalUtils)
# study area
country <- "Nigeria"
# root folder
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
outdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/LandCover"); dir.create(outdir, F, T)
# read AOI
aoi_path <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp")
gdalwarp(srcfile = paste0(proPath, "/ESA_WorldCover10m_v100_NGA.tif"), dstfile = paste0(outdir, "/ESA_WorldCover300m_v100_NGA.tif"), overwrite = T, tr = c(0.00297619, 0.00297619), r = "near", cutline = aoi_path, crop_to_cutline = T) #0.00297619, 0.00297619
test <- rast(paste0(outdir, "/ESA_WorldCover300m_v100_NGA.tif"))
test
plot(test)
# Load required packages
library(geodata)
library(sf)
library(RCurl)
library(httr)
library(rvest)
library(googledrive)
library(tidyverse)
library(rvest)
library(FAOSTAT)
# Setting the working directory
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
# study area
country <- "Nigeria"
outdir <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country); dir.create(outdir, F, T)
admin_levels <- c("0", "1", "2")
# ESA World Cover - for use in creating cropland mask
outdir <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover"); dir.create(outdir, F, T)
drive_deauth()
drive_user()
#folder link to id
public_folder <- "https://drive.google.com/drive/folders/1SsZVX3LDuvGweJGe8sIeDR0me-WOqH45"
folder_id <- drive_get(as_id(public_folder))
#find files in folder
public_files <- drive_ls(folder_id)
for(i in 1:nrow(public_files)){
public_file <- public_files[i, ]
file_name <- public_file$name
drive_download(public_file, path = paste0(outdir, "/", file_name), overwrite = TRUE)
}
# Load required packages
library(raster)
library(terra)
library(gdalUtils)
# study area
country <- "Nigeria"
# root folder
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
outdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/LandCover"); dir.create(outdir, F, T)
# read AOI
aoi_path <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp")
gdalwarp(srcfile = paste0(proPath, "/ESA_WorldCover100m_v100_NGA.tif"), dstfile = paste0(outdir, "/ESA_WorldCover300m_v100_NGA.tif"), overwrite = T, tr = c(0.00297619, 0.00297619), r = "near", cutline = aoi_path, crop_to_cutline = T) #0.00297619, 0.00297619
test <- paste0(outdir, "/ESA_WorldCover300m_v100_NGA.tif")
plot(test)
test
test <- rast(paste0(outdir, "/ESA_WorldCover300m_v100_NGA.tif"))
test
plot(test)
test
# Fix extent
dmpTemp <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP/c_gls_DMP300-RT6_202301100000_GLOBE_OLCI_V1.1.2.tif"))
dmpTemp
# Fix extent
dmpTemp <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP/c_gls_DMP300-RT6_202301100000_GLOBE_OLCI_V1.1.2.tif"))
landCover <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/LandCover/ESA_WorldCover300m_v100_NGA.tif"))
landCover <- crop(landCover, ext(dmpTemp))
landCover <- resample(landCover, dmpTemp, method="ngb")
landCover <- mask(landCover, mask = dmpTemp)
# Fix extent
dmpTemp <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP/c_gls_DMP300-RT6_202301100000_GLOBE_OLCI_V1.1.2.tif"))
landCover <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/LandCover/ESA_WorldCover300m_v100_NGA.tif"))
landCover <- crop(landCover, ext(dmpTemp))
landCover <- resample(landCover, dmpTemp, method="near")
landCover <- mask(landCover, mask = dmpTemp)
landCover
dmpTemp
paste0(outdir, "/LUcrops300ESA.tif")
unique(landCover$Map)
esaCrop <- landCover %>% tidyterra::filter(map == "40")
esaCrop <- landCover %>% tidyterra::filter(Map == "40")
plot(esaCrop)
# Load required packages
library(raster)
library(terra)
library(gdalUtils)
# study area
country <- "Nigeria"
# root folder
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
# Load required packages
library(raster)
library(terra)
library(gdalUtils)
# study area
country <- "Nigeria"
# root folder
root <- "/home/s2255815/rdrive/AU_IBAR/ruminant-feed-balance"
proPath <- paste0(root, "/src/1Data-download/SpatialData/inputs/LandCover")
outdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/LandUse"); dir.create(outdir, F, T)
# read AOI
aoi_path <- paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp")
gdalwarp(srcfile = paste0(proPath, "/ESA_WorldCover100m_v100_NGA.tif"), dstfile = paste0(proPath, "/ESA_WorldCover300m_v100_NGA.tif"), overwrite = T, tr = c(0.00297619, 0.00297619), r = "near", cutline = aoi_path, crop_to_cutline = T) #0.00297619, 0.00297619
# Fix extent
dmpTemp <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP/c_gls_DMP300-RT6_202301100000_GLOBE_OLCI_V1.1.2.tif"))
# Fix extent
dmpTemp <- rast(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP/c_gls_DMP300-RT6_202301100000_GLOBE_OLCI_V1.1.2.tif"))
landCover <- rast(paste0(proPath, "/ESA_WorldCover300m_v100_NGA.tif"))
landCover <- crop(landCover, ext(dmpTemp))
landCover <- resample(landCover, dmpTemp, method="near")
landCover <- mask(landCover, mask = dmpTemp)
paste0(outdir, "/LUcrops300ESA.tif")
# Extract cropland only?
LUcrops300ESA <- landCover %>% tidyterra::filter(Map == "40")
writeRaster(itreeCover, paste0(outdir, "/LUcrops300ESA.tif"), overwrite=TRUE)
writeRaster(LUcrops300ESA, paste0(outdir, "/LUcrops300ESA.tif"), overwrite=TRUE)
dea <- rast("/home/s2255815/rdrive/AU_IBAR/References/Ruminant-feed-balance-2024/src/2Feed-geoprocessing/SpatialData/inputs/Feed_DrySeason/LandUse/LUcrops300DEA.tif")
dea
dea <- rast("/home/s2255815/rdrive/AU_IBAR/References/Ruminant-feed-balance-2024/src/2Feed-geoprocessing/SpatialData/inputs/Feed_DrySeason/LandUse/LUcrops300DEA_unproj.tif")
dea
plot(dea)
reticulate::repl_python()
reticulate::repl_python()
gc()
rm(list=ls())
# Prepare dry matter feed potential
# Author: Simon Fraval
# Last modified by John Mutua on 12/11/2024
yearOffset <- (0*365) # Base year = 2020
# # Install required packages
# install.packages("dplyr")
# install.packages("raster")
# install.packages("rgdal")
# Load libraries
library(dplyr)
library(raster)
library(rgdal)
library(sf)
library(terra)
#rasterOptions(tmpdir = EDDIE_TMP)
rasterOptions(tmpdir="/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
# root folder
root <- "."
country <- "Nigeria"
# read AOI
#aoi <- readOGR(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
aoi <- read_sf(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
setwd("~/rdrive/AU_IBAR/ruminant-feed-balance")
gc()
rm(list=ls())
# Prepare dry matter feed potential
# Author: Simon Fraval
# Last modified by John Mutua on 12/11/2024
yearOffset <- (0*365) # Base year = 2020
# # Install required packages
# install.packages("dplyr")
# install.packages("raster")
# install.packages("rgdal")
# Load libraries
library(dplyr)
library(raster)
library(rgdal)
library(sf)
library(terra)
#rasterOptions(tmpdir = EDDIE_TMP)
rasterOptions(tmpdir="/home/s2255815/rspovertygroup/JameelObs/FeedBaskets/AUTemp")
rasterOptions(maxmemory = 5e+20) # 6e+10 ~51GB allowed
rasterOptions(todisk = TRUE)
# root folder
root <- "."
country <- "Nigeria"
# read AOI
#aoi <- readOGR(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
aoi <- read_sf(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
yearList <- c("2020", "2021", "2022", "2023")
lapply(yearList, function(year){
cropOutdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Cropping_days"); dir.create(cropOutdir, F, T)
FeedQuantityOutdir <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/Feed_quantity/", year); dir.create(FeedQuantityOutdir, F, T)
pathPhen <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/PhenologyModis/", year, "/outputTif")
filesPhenology <- list.files(path = pathPhen,pattern=".tif$", full.names = T)
pathDMP <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/DMP")
filesDMP <- list.files(path = pathDMP, pattern = paste0("RT6_", year, ".*\\.tif$"), full.names = TRUE)
stDMP <- stack(filesDMP)
#datesDMP <- as.vector(sapply(filesDMP, function(x) substr(x, start =(nchar(x) - 37), stop = (nchar(x) -30)))) #(nchar(x) - 41), stop = (nchar(x) -34))
datesDMP <- sub(".*RT6_(.{8}).*", "\\1", filesDMP)
datesDMP <- as.Date(datesDMP, "%Y%m%d")
datesDMPdiff <- as.numeric(datesDMP - as.Date("1970/01/01")) #convert to same date format as Modis phenology
pathLU <-  paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/LandUse")
filesLU <- list.files(path = pathLU, pattern = "300.tif$", full.names = T)
pathSPAM <- paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/SPAM2020")
#From SPAM documentation: *_TA	all technologies together, ie complete crop; *_TI	irrigated portion of crop; *_TH	rainfed high inputs portion of crop; *_TL	rainfed low inputs portion of crop; *_TS	rainfed subsistence portion of crop; *_TR	rainfed portion of crop (= TA - TI, or TH + TL + TS)
#end of file name should be physical area_cropname_a -> last a standing for all tech together.
filesSPAM <- list.files(path = pathSPAM, pattern = "_a.tif$", full.names = T)
iSPAMAnimalDigestCropFrac <- raster(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/SPAM2020/animal_digest_frac.tif"))
rProtectedAreas <- stack(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/ProtectedAreas/WDPAGlobal.tif")) #Original shp is 4gb+
rNonProtectedAreas <- calc(rProtectedAreas, fun = function(x){ifelse(x == 0, 1, 0)})
rm(rProtectedAreas)
print("past protected")
stLU <- stack(filesLU)
#LUcrops300DEA <- raster(paste0(pathLU, "/LUcrops300DEA.tif"))
# stPhen <- stack(raster('SpatialData/inputs/Feed_DrySeason/PhenologyModis/outputTif/phenoGreenup1.tif'),
#                 raster('SpatialData/inputs/Feed_DrySeason/PhenologyModis/outputTif/phenoSenescence1.tif'),
#                 raster('SpatialData/inputs/Feed_DrySeason/PhenologyModis/outputTif/phenoGreenup2.tif'),
#                 raster('SpatialData/inputs/Feed_DrySeason/PhenologyModis/outputTif/phenoSenescence2.tif'))
stPhen <- stack(raster(grep("phenoGreenup1.tif", filesPhenology, value=TRUE)),
raster(grep("phenoSenescence1.tif", filesPhenology, value=TRUE)),
raster(grep("phenoGreenup2.tif", filesPhenology, value=TRUE)),
raster(grep("phenoSenescence2.tif", filesPhenology, value=TRUE)))
gc()
#Crop land use to test area
# LUcrops300DEA <- extend(LUcrops300DEA, extent(stDMP[[1]]))
# LUcrops300DEA <- crop(LUcrops300DEA, extent(stDMP[[1]]))
# LUcrops300DEA <- mask(LUcrops300DEA, aoi)
stLU <- extend(stLU, extent(stDMP[[1]]))
stLU <- crop(stLU, extent(stDMP[[1]]))
stLU <- mask(stLU, aoi)
#stLU <- stack(stLU, LUcrops300DEA)
stLU <- stack(stLU)
#Revise grass and shrub area
#diffCrop <- LUcrops300DEA - stLU$LUcrops300
stLU$LUgrassShrub300 <- sum(stLU$LUgrass300, stLU$LUshrub300, na.rm = T)
#stLU$LUgrassShrub300 <- stLU$LUgrassShrub300 - LUcrops300DEA
stLU$LUgrassShrub300 <- reclassify(stLU$LUgrassShrub300, c(-Inf, 0, 0))
stLU$LUgrassShrub300[is.na(stLU$LUgrassShrub300)] <- 0
#stLU$LUcrops300 <- LUcrops300DEA
stLU$LUtree300 <- reclassify(stLU$LUtree300, c(-Inf, 0, 0, 200, Inf, 0))
stLU$LUtree300[is.na(stLU$LUtree300)] <- 0
#Crop phenology to test area
stPhen <- extend(stPhen, extent(stDMP[[1]]))
stPhen <- crop(stPhen, extent(stDMP[[1]]))
stPhen <- resample(stPhen, stDMP[[1]], method = "ngb")
stPhen <- stPhen + yearOffset #!Change to + or - as needed
#stPhen$phenoGreenup2 <- overlay(stPhen$phenoGreenup2, stPhen$phenoGreenup1, stPhen$phenoSenescence2, fun = function(x, g1, s2){ifelse(x > max(datesDMPdiff)+30 & x-365 < g1 & s2-365 < g1, x-365, x)})
#stPhen$phenoSenescence2 <- overlay(stPhen$phenoSenescence2, stPhen$phenoGreenup1, fun = function(x, g1){ifelse(x > max(datesDMPdiff)+30 & x-365 < g1, x-365, x)})
stPhen <- stack(stPhen)
stPhen$phenoGreenup2 <- calc(stPhen$phenoGreenup2, fun = function(x){ifelse(x > max(datesDMPdiff)+30, NA, x)})
stPhen$phenoSenescence2 <- calc(stPhen$phenoSenescence2, fun = function(x){ifelse(x > max(datesDMPdiff)+30, NA, x)})
stPhen$phenoGreenup1 <- calc(stPhen$phenoGreenup1, fun = function(x){ifelse(x < min(datesDMPdiff)-30, NA, x)})
stPhen$phenoSenescence1 <- calc(stPhen$phenoSenescence1, fun = function(x){ifelse(x < min(datesDMPdiff)-30, NA, x)})
gc()
growing2 <- (stPhen$phenoSenescence2 - stPhen$phenoGreenup2)
growing2 <- reclassify(growing2, c(365, Inf, 0))
growingDays <- sum((stPhen$phenoSenescence1 - stPhen$phenoGreenup1), growing2, na.rm = T)
growingDays <- reclassify(growingDays, c(300, Inf, 300))
gc()
writeRaster(growingDays, paste0(cropOutdir, "/croppingDays_", year, ".tif"), overwrite = T)
#stPhen <- mask(stPhen, aoi)
rNonProtectedAreas <- resample(rNonProtectedAreas, stDMP[[1]], method = "ngb")
rNonProtectedAreas <- extend(rNonProtectedAreas, extent(stDMP[[1]]))
rNonProtectedAreas <- crop(rNonProtectedAreas, extent(stDMP[[1]]))
#rNonProtectedAreas <- mask(rNonProtectedAreas, aoi)
print("past 0")
names(stDMP) <- paste0("d", datesDMPdiff)
print("past 1")
#####Estimate total DMP per ha
#grazeForestFrac <- 0.1 #@Assume 10% of dry matter is extracted from forests for animal feed.
grassFracDry <- 1# 0.33 #max 0.55
grassFracWet <- 1# 0.55 #max 0.55
browseShrubFrac <- 1 #0.38 #max 0.38
browseForestFrac <- 1
iResidueUtil <- 1 #max 0.6
#iResidueUtil <- raster('SpatialData/inputs/SPAM2010cropspecies/crop_fed_frac.tif')
iSPAMHarvestResidueFrac <- raster(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/SPAM2020/crop_res_frac.tif"))
gc()
#residueFrac <- calc(iSPAMHarvestResidueFrac, fun = function(x){x * iResidueUtil})
#residueFrac <- overlay(iSPAMHarvestResidueFrac, iResidueUtil, fun = function(x, y){x * y})  #harvest index and utilised
print("past overlay 1")
#res1 <- res(residueFrac)[1]
#res2 <- res(stDMP[[1]])[1]
residueFrac <- resample(iSPAMHarvestResidueFrac, stDMP[[1]], method = "ngb")
residueFrac <- extend(residueFrac, extent(stDMP[[1]]))
residueFrac <- crop(residueFrac, extent(stDMP[[1]]))
#residueFrac <- mask(residueFrac, aoi)
#stLU$LUgrass300 <- sum(stLU$LUgrass300, stLU$LUshrub300, na.rm = T)
#shrubFrac <- raster('SpatialData/inputs/TreeCover/treecover_imp.tif')/100
shrubFrac <- raster(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/", country, "/TreeCover/treecover300m.tif"))
#shrubFrac[is.na(shrubFrac)] <- 0.13
#shrubFrac <- reclassify(shrubFrac, c(NA, NA, 0.13), right = FALSE)
shrubFrac <- resample(shrubFrac, stDMP[[1]], method = "ngb")
shrubFrac <- extend(shrubFrac, extent(stDMP[[1]]))
shrubFrac <- crop(shrubFrac, extent(stDMP[[1]]))
gc()
funGrowingGrassWet <- function(dmp, crops, grassShrub, forest, shrubFrac, greenup, senesence, greenup2, senesence2, nonprotected) {ifelse((greenup <= datesDMPdiff[i] & senesence >= datesDMPdiff[i]) | (greenup2 <= datesDMPdiff[i] & senesence2 >= datesDMPdiff[i]), (dmp*9*grassShrub*grassFracWet*(1-shrubFrac))+(dmp*9*forest*grassFracWet*(1-shrubFrac)*nonprotected), NA) } #@feedFrac is the proportion of crops grown that have feedable residues - i.e. excluding coffee, tea, ect.
funGrowingGrassDry <- function(dmp, crops, grassShrub, forest,  shrubFrac, greenup, senesence, greenup2, senesence2, nonprotected) {ifelse((greenup > datesDMPdiff[i]) | (senesence < datesDMPdiff[i] & senesence + 60 > datesDMPdiff[i]) | (senesence2 < datesDMPdiff[i]), (dmp*9*grassShrub*grassFracDry*(1-shrubFrac))+(dmp*9*forest*grassFracDry*(1-shrubFrac)*nonprotected), NA) } #@feedFrac is the proportion of crops grown that have feedable residues - i.e. excluding coffee, tea, ect.
funGrowingBrowse <- function(dmp, crops, grassShrub, forest,  shrubFrac, nonprotected) {(dmp*9*grassShrub*shrubFrac*browseShrubFrac)+(dmp*9*forest*nonprotected*shrubFrac*browseForestFrac)}
funGrowingCrops <- function(dmp, crops, greenup, senesence, feedFrac, resFrac, greenup2, senesence2) {ifelse((greenup <= datesDMPdiff[i] & senesence >= datesDMPdiff[i]) | (greenup2 <= datesDMPdiff[i] & senesence2 >= datesDMPdiff[i]), (dmp*9*crops), NA) } #@feedFrac is the proportion of crops grown that have feedable residues - i.e. excluding coffee, tea, ect.
funGrowingAfter <- function(dmp, crops, greenup, senesence, greenup2, senesence2, nonprotected) {ifelse((greenup > datesDMPdiff[i]) | (senesence < datesDMPdiff[i] & senesence + 60 > datesDMPdiff[i]) | (senesence2 < datesDMPdiff[i]), (dmp*9*crops), NA) } #@feedFrac is the proportion of crops grown that have feedable residues - i.e. excluding coffee, tea, ect.
for(i in 1:length(names(stDMP))){
iDMPGrassGrowing <- overlay(stDMP[[i]], stLU$LUcrops300, stLU$LUgrassShrub300, stLU$LUtree300, shrubFrac, stPhen$phenoGreenup1, stPhen$phenoSenescence1, stPhen$phenoGreenup2, stPhen$phenoSenescence2, rNonProtectedAreas, fun = funGrowingGrassWet)
writeRaster(iDMPGrassGrowing, paste0(FeedQuantityOutdir, "/grassWetDMP", datesDMP[i], ".tif"), overwrite = TRUE)
rm(iDMPGrassGrowing)
gc()
iDMPGrassDry <- overlay(stDMP[[i]], stLU$LUcrops300, stLU$LUgrassShrub300, stLU$LUtree300, shrubFrac, stPhen$phenoGreenup1, stPhen$phenoSenescence1, stPhen$phenoGreenup2, stPhen$phenoSenescence2, rNonProtectedAreas, fun = funGrowingGrassDry)
writeRaster(iDMPGrassDry, paste0(FeedQuantityOutdir, "/grassDryDMP", datesDMP[i], ".tif"), overwrite = TRUE)
rm(iDMPGrassDry)
gc()
iDMPBrowse <- overlay(stDMP[[i]], stLU$LUcrops300, stLU$LUgrassShrub300, stLU$LUtree300, shrubFrac, rNonProtectedAreas, fun = funGrowingBrowse)
writeRaster(iDMPBrowse, paste0(FeedQuantityOutdir, "/browseDMP", datesDMP[i], ".tif"), overwrite = TRUE)
rm(iDMPBrowse)
gc()
iDMPCropGrowing <- overlay(stDMP[[i]], stLU$LUcrops300, stPhen$phenoGreenup1, stPhen$phenoSenescence1, iSPAMAnimalDigestCropFrac, residueFrac, stPhen$phenoGreenup2, stPhen$phenoSenescence2, fun = funGrowingCrops)
writeRaster(iDMPCropGrowing, paste0(FeedQuantityOutdir, "/cropDMP", datesDMP[i], ".tif"), overwrite = TRUE)
rm(iDMPCropGrowing)
gc()
iDMPAfter <- overlay(stDMP[[i]], stLU$LUcrops300, stPhen$phenoGreenup1, stPhen$phenoSenescence1, stPhen$phenoGreenup2, stPhen$phenoSenescence2, fun = funGrowingAfter)
writeRaster(iDMPAfter, paste0(FeedQuantityOutdir, "/afterDMP", datesDMP[i], ".tif"), overwrite = TRUE)
rm(iDMPAfter)
gc()
print(paste("Cycle", i, ": ", year))
}
#rm(list = ls())
gc()
iDMPgrassWet <- stack(list.files(path = paste0(FeedQuantityOutdir), pattern="grassWetDMP",full.names = T))
DMPgrassmeanWet <- mean(iDMPgrassWet, na.rm = T)
writeRaster(DMPgrassmeanWet, paste0(FeedQuantityOutdir, "/DMPgrassWetmean_", year, ".tif"), overwrite = TRUE)
iDMPgrassDry <- stack(list.files(path = paste0(FeedQuantityOutdir), pattern="grassDryDMP",full.names = T))
DMPgrassmeanDry <- mean(iDMPgrassDry, na.rm = T)
writeRaster(DMPgrassmeanDry, paste0(FeedQuantityOutdir, "/DMPgrassDrymean_", year, ".tif"), overwrite = TRUE)
iDMPbrowse <- stack(list.files(path = paste0(FeedQuantityOutdir), pattern="browseDMP",full.names = T))
DMPbrowsemean <- mean(iDMPbrowse, na.rm = T)
writeRaster(DMPbrowsemean, paste0(FeedQuantityOutdir, "/DMPbrowsemean_", year, ".tif"), overwrite = TRUE)
iDMPCropGrowing <- stack(list.files(path = paste0(FeedQuantityOutdir), pattern="cropDMP",full.names = T))
DMPcropmean <- mean(iDMPCropGrowing, na.rm = T)
writeRaster(DMPcropmean, paste0(FeedQuantityOutdir, "/DMPcropmean_", year, ".tif"), overwrite = TRUE)
iDMPAfter <- stack(list.files(path = paste0(FeedQuantityOutdir), pattern="afterDMP",full.names = T))
DMPAftermean <- mean(iDMPAfter, na.rm = T)
writeRaster(DMPAftermean, paste0(FeedQuantityOutdir, "/DMPaftermean_", year, ".tif"), overwrite = TRUE)
gc()
print(paste("Completed processing year: ", year))
})
# Prepare livestock population layers
# Layer provided at 10km spatial resolution, units: animals per km2
# Author: John Mutua
# Last modified on 11/11/2024
# # Install required packages
# install.packages("terra")
library(terra)
library(sf)
country <- "Nigeria"
# root folder
root <- "."
indir <- paste0(root, "/src/1Data-download/SpatialData/inputs/GLW4")
outdir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/inputs/GLW4"); dir.create(outdir, F, T)
aoi2 <- st_read(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
animalCategories <- c("CTL", "GTS", "PGS", "SHP", "HRS")
for(animalCategory in animalCategories){
animalFile <- terra::rast(paste0(indir, "/GLW4-2020.D-DA.", animalCategory, ".tif"))
animalFile <- terra::crop(animalFile, aoi2)
if(animalCategory != "HRS"){ # Horse numbers are from 2025, already in animal per pixel
animalFile_area <- terra::cellSize(animalFile, unit = "km") #calculate area per pixel
animalFile <- animalFile*animalFile_area #total number of cattle per pixel taking into account the area per pixel
}
# masked_animalFile <- mask(animalFile, aoi2)
# sum_values <- global(masked_animalFile, fun = "sum", na.rm = TRUE)
# sum_values
writeRaster(animalFile, paste0(outdir, "/", names(animalFile), ".tif"), overwrite=TRUE)
}
# # plotting
# library(tidyterra)
# aoi1 <- read_sf(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/AdminBound/aoi1.shp"))
# cattlePop <- rast(paste0(outdir, "/GLW4-2020.D-DA.CTL.tif"))
# ggplot() + geom_sf(data = aoi1, colour = "black", show.legend = F) +
#   geom_spatraster(data = cattlePop) +
#   geom_sf(data = aoi1, colour = "black", fill = NA, show.legend = F) +
#   scale_fill_gradient(limits = c(0, 250), breaks = c(0, 50, 100, 250), low = "#FFFFFF", high = "brown", na.value = NA, name="Cattle (Head/sq km)")
# Prepare livestock systems maps
# Author: John Mutua
# Last modified on 17/11/2024
# # Install required packages
# install.packages("terra")
library(terra)
country <- "Nigeria"
# root folder
root <- "."
indir <- paste0(root, "/src/1Data-download/SpatialData/inputs/GLPS")
outdir <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/inputs/GLPS"); dir.create(outdir, F, T)
aoi2 <- st_read(paste0(root, "/src/1Data-download/SpatialData/inputs/AdminBound/", country, "/aoi0.shp"))
glps <- rast(paste0(indir, "/glps_gleam_61113_10km/glps_gleam_61113_10km.tif"))
glps <- terra::crop(glps, aoi2)
writeRaster(glps, paste0(outdir, "/glps.tif"), overwrite=TRUE)
# # plotting
# library(tidyterra)
# aoi1 <- read_sf(paste0(root, "/src/2Feed-geoprocessing/SpatialData/inputs/AdminBound/aoi1.shp"))
# cattlePop <- rast(paste0(outdir, "/GLW4-2020.D-DA.CTL.tif"))
# ggplot() + geom_sf(data = aoi1, colour = "black", show.legend = F) +
#   geom_spatraster(data = cattlePop) +
#   geom_sf(data = aoi1, colour = "black", fill = NA, show.legend = F) +
#   scale_fill_gradient(limits = c(0, 250), breaks = c(0, 50, 100, 250), low = "#FFFFFF", high = "brown", na.value = NA, name="Cattle (Head/sq km)")
# Copy files to 3Balance-estimates folder
# Author: John Mutua
# Last modified on 12/11/2024
# avoid scientific notation
options(scipen = 999)
# # Install required packages
# install.packages("raster")
# install.packages("stars")
# install.packages("sf")
# install.packages("dplyr")
# install.packages("exactextractr")
# install.packages("purrr")
# install.packages("readr")
# Load libraries
# root folder
root <- "."
country <- "Nigeria"
# paths
indir <- paste0(root, "/src"); dir.create(indir, F, T)
spatialDataOut <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/inputs"); dir.create(spatialDataOut, F, T)
# administrative boundaries
admin_src <- paste0(indir, "/1Data-download/SpatialData/inputs/AdminBound/", country)
admin_files <- list.files(path = admin_src, pattern = "aoi|gadm40_NGA", full.names = TRUE)
admin_dest <- paste0(spatialDataOut, "/")
file.copy(admin_files, admin_dest, overwrite = TRUE)
# livelihood zones -- .geojson
lhz_src <- paste0(indir, "/1Data-download/SpatialData/inputs/AggregationZones/FEWS_LZ.geojson")
lhz_dest <- paste0(spatialDataOut, "/FEWS_LZ.geojson")
file.copy(lhz_src, lhz_dest, overwrite = TRUE)
# livelihood zones -- .shp
lhz_src <- paste0(indir, "/1Data-download/SpatialData/inputs/AggregationZones")
lhz_files <- list.files(path = lhz_src, pattern = "NG_LHZ_2018", full.names = TRUE)
lhz_dest <- paste0(spatialDataOut, "/")
file.copy(lhz_files, lhz_dest, overwrite = TRUE)
# livelihood zones -- Provided by the ministry
lhz_src <- paste0(indir, "/1Data-download/SpatialData/inputs/AggregationZones")
lhz_files <- list.files(path = lhz_src, pattern = "Ecological_and_Feed_Distribution", full.names = TRUE)
lhz_dest <- paste0(spatialDataOut, "/")
file.copy(lhz_files, lhz_dest, overwrite = TRUE)
# Feed parameters
feedPar_src <- paste0(indir, "/1Data-download/Tables/inputs/", country, "/CropParams")
feedPar_files <- list.files(path = feedPar_src, full.names = TRUE)
feedPar_dest <- paste0(root, "/src/3Balance-estimates/", country, "/CropParams"); dir.create(feedPar_dest, F, T)
file.copy(feedPar_files, feedPar_dest, overwrite = TRUE)
# Livestock parameters
livePar_src <- paste0(indir, "/1Data-download/Tables/inputs/", country, "/LivestockParams")
livePar_files <- list.files(path = livePar_src, full.names = TRUE)
livePar_dest <- paste0(root, "/src/3Balance-estimates/", country, "/LivestockParams"); dir.create(livePar_dest, F, T)
file.copy(livePar_files, livePar_dest, overwrite = TRUE)
# Cropping days
crop_src <- paste0(indir, "/2Feed-geoprocessing/SpatialData/inputs/", country, "/Cropping_days")
crop_dest <- paste0(root, "/src/3Balance-estimates/", country, "/CropParams/Cropping_days"); dir.create(crop_dest, F, T)
crop_files <- list.files(crop_src, full.names = TRUE, recursive = TRUE)
file.copy(crop_files, crop_dest, recursive = TRUE)
# Feed quantity
feedQu_src <- paste0(indir, "/2Feed-geoprocessing/SpatialData/inputs/", country, "/Feed_DrySeason/Feed_quantity")
feedQu_dest <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/inputs/Feed_quantity"); dir.create(feedQu_dest, F, T)
feedQu_files <- list.files(feedQu_src, pattern = "_(2020|2021|2022|2023)\\.tif$", full.names = TRUE, recursive = TRUE)
file.copy(feedQu_files, feedQu_dest, recursive = TRUE)
# Burned areas
burned_folders <- c("2020", "2021", "2022", "2023")
for (burned_folder in burned_folders) {
burned_src <- file.path(paste0(indir, "/2Feed-geoprocessing/SpatialData/inputs/", country, "/Burned/", burned_folder))
burned_dest <- file.path(burned_dest <- paste0(root, "/src/3Balance-estimates/", country,"/SpatialData/inputs/Burned/", burned_folder))
if (!dir.exists(burned_dest)) {dir.create(burned_dest, recursive = TRUE)}
burned_files <- list.files(burned_src, pattern = "Months\\.tif$", full.names = TRUE, recursive = TRUE)
file.copy(burned_files, file.path(burned_dest, basename(burned_files)), recursive = TRUE)
}
# SPAM 2020
spam_src <- paste0(indir, "/2Feed-geoprocessing/SpatialData/inputs/", country, "/SPAM2020")
spam_dest <- paste0(root, "/src/3Balance-estimates/", country, "/SpatialData/inputs/SPAM2020"); dir.create(spam_dest, F, T)
spam_files <- list.files(spam_src, pattern = "_(a|frac)\\.tif$", full.names = TRUE, ignore.case = TRUE)
file.copy(spam_files, spam_dest, recursive = TRUE)
